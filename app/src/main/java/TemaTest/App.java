/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package TemaTest;

import java.io.*;

public class App {

    public static final String ERROR1 = "{ 'status' : 'error', 'message' : 'You need to be authenticated'}";

    public static void eraseFile() { // to erase txt files contents
        try (FileWriter fileWriter = new FileWriter("dataBase.txt")) {
            fileWriter.write("");
        } catch (IOException e) {
            System.out.println(e);
        }
    }
    
public App() {/* compiled code */}

    public static void main(String[] strings) {
        if (strings == null){ // if there is nothing as argument
            System.out.println("Hello world!");
        } else if (strings.length == 5) {
            if (strings[0].equals("-comment-post")) {
                if (strings[4].length() > 305) { // if post is more than 300 characters
                    System.out.println("{ 'status' : 'error', 'message' : 'Comment text length exceeded'}");
                } else {
                    Comment comment = new Comment(strings[4].substring(6));
                    comment.addComment(strings[1].substring(3), strings[3].substring(9));
                    System.out.println("{ 'status' : 'ok', 'message' : 'Comment added successfully'}");
                }
            }
        } else if ((strings.length == 4)) { // if there are 4 arguments
            if (strings[0].equals("-create-post")) { // if operation type is create post
                if (strings[3].length() > 305) { // if post is more than 300 characters
                    System.out.println("{ 'status' : 'error', 'message' : 'Post text length exceeded'}");
                } else { // create post
                    Post post = new Post(strings[3].substring(6));
                    post.addPost(strings[1].substring(3));
                    System.out.println("{ 'status' : 'ok', 'message' : 'Post added successfully'}");
                }
            } else if (strings[0].equals("-delete-post-by-id")) { // if operation type is delete post
                Post post = new Post();
                post.deletePost(strings[1].substring(3), strings[3].substring(4));
            } else if (strings[0].equals("-follow-user-by-username")) { // if operation type is follow user
                User user = new User(strings[3].substring(10));
                if ((user.checkIfUserExist() == 0) || (user.checkIfAlreadyFollowing(strings[1].substring(3),
                        strings[3].substring(10)) == 1)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'The username to follow was not valid'}");
                } else {
                    user.addFollowing(strings[1].substring(3), strings[3].substring(10));
                    user.addFollowers(strings[1].substring(3), strings[3].substring(10));
                    System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                }
            } else if (strings[0].equals("-unfollow-user-by-username")) { // if operation type is unfollow user
                User user = new User(strings[3].substring(10));
                if ((user.checkIfUserExist() == 0) || (user.checkIfAlreadyFollowing(strings[1].substring(3),
                        strings[3].substring(10)) == 0)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'The username to unfollow was not valid'}");
                } else {
                    user.removeFollowing(strings[1].substring(3), strings[3].substring(10));
                    user.removeFollowers(strings[1].substring(3), strings[3].substring(10));
                    System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                }
            } else if (strings[0].equals("-delete-comment-by-id")) { // if operation type is delete comment
                Comment comment = new Comment();
                if (comment.checkIfCommentExists(strings[1].substring(3)) == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'The identifier was not valid'}");
                } else {
                    comment.deleteComment(strings[1].substring(3), strings[3].substring(4));
                    System.out.println("{ 'status' : 'ok', 'message' : 'Operation executed successfully'}");
                }
            } else if (strings[0].equals("-get-followers")) { // if operation type is get followers
                User user = new User(strings[3].substring(10));
                if (user.checkIfUserExist() == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'The username to list followers was not valid'}");
                } else {
                    user.getFollowersList(strings[3].substring(10));
                }
            } else if (strings[0].equals("-get-post-details")) { // if operation type is get post details
                Post post = new Post();
                if (post.ifPostExists(strings[3].substring(9)) == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'The post identifier was not valid'}");
                } else {
                    post.getPostDetails(strings[3].substring(9));
                }
            } else if (strings[0].equals("-get-user-posts")) { // if operation type is get user posts
                User user = new User(strings[3].substring(10));
                if (user.checkIfUserExist() == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'The username to list posts was not valid'}");
                } else if (user.checkIfAlreadyFollowing(strings[1].substring(3), strings[3].substring(10)) == 1) {
                    Post post = new Post();
                    post.getUserPosts(strings[3].substring(10));
                } else {
                    System.out.println("{ 'status' : 'error', 'message' : 'The username to list posts was not valid'}");
                }
            } else if (strings[0].equals("-like-post")) { // if ooperation type is like post
                Post post = new Post();
                if (post.ifPostExists(strings[3].substring(9)) == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to like was not valid'}");
                } else {
                    post.addLike(strings[1].substring(3),strings[3].substring(9));
                }
            } else if (strings[0].equals("-unlike-post")) { // if operation type is unlike post
                Post post = new Post();
                if (post.ifPostExists(strings[3].substring(9)) == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'The post identifier to unlike was not valid'}");
                } else {
                    post.unlike(strings[1].substring(3),strings[3].substring(9));
                }
            } else if (strings[0].equals("-like-comment")) { // if operation type is like comment
                Comment comment = new Comment();
                if (comment.ifCommentExists(strings[3].substring(12)) == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to like was not valid'}");
                } else {
                    comment.addLike(strings[1].substring(3),strings[3].substring(12));
                }
            } else if (strings[0].equals("-unlike-comment")) { // if operation type is like comment
                Comment comment = new Comment();
                if (comment.ifCommentExists(strings[3].substring(12)) == 0) {
                    System.out.println("{ 'status' : 'error', 'message' : 'The comment identifier to unlike was not valid'}");
                } else {
                    comment.unlike(strings[1].substring(3),strings[3].substring(12));
                }
            }
        } else if ((strings.length == 3)) { // if there are 3 arguments
            if (strings[0].equals("-create-user")) { // if operation type is create user
                User user = new User(strings[1].substring(3), strings[2].substring(3));
                if ((user.checkIfUserExist()) == 0) { // if user doesnt exist
                    user.addUsername(); // create user
                    System.out.println("{ 'status' : 'ok', 'message' : 'User created successfully'}");
                } else { // if user already exists
                    System.out.println("{ 'status' : 'error', 'message' : 'User already exists'}");
                }
            } else if (strings[0].equals("-create-post") || strings[0].equals("-delete-post-by-id")) { // if operation type is create or delete post
                User user = new User(strings[1].substring(3), strings[2].substring(3));
                if (((user.checkIfUserExist()) == 0) || ((user.checkIfUserExist()) == 1)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else if (user.checkIfUserExist() == 11) {
                    System.out.println("{ 'status' : 'error', 'message' : 'No text provided'}");
                }
            } else if (strings[0].equals("-get-most-liked-users") || strings[0].equals("-get-most-followed-users") ||
                    strings[0].equals("-get-most-commented-posts") || strings[0].equals("-get-most-liked-posts") ||
                    strings[0].equals("-unlike-comment") || strings[0].equals("-like-comment") || strings[0].equals("-unlike-post") ||
                    strings[0].equals("-like-post") || strings[0].equals("-get-user-posts") || strings[0].equals("-get-post-details") ||
                    strings[0].equals("-get-followings-posts") || strings[0].equals("-get-followers") ||
                    strings[0].equals("-get-following") || strings[0].equals("-delete-comment-by-id") ||
                    strings[0].equals("-follow-user-by-username") || strings[0].equals("-unfollow-user-by-username") ||
                    strings[0].equals("-comment-post")) { // if operation type is (follow or unfollow user,
                // create or delete comment, get following or followers, get following post, get users post or details,
                // like or unlike (post or comment), get most (liked user, liked posts, commented posts, followed users))
                User user = new User(strings[1].substring(3), strings[2].substring(3));
                if (((user.checkIfUserExist()) == 0) || ((user.checkIfUserExist()) == 1)) {
                    System.out.println("{ 'status' : 'error', 'message' : 'Login failed'}");
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-follow-user-by-username")) {
                    System.out.println("{ 'status' : 'error', 'message' : 'No username to follow was provided'}");
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-unfollow-user-by-username")) {
                    System.out.println("{ 'status' : 'error', 'message' : 'No username to unfollow was provided'}");
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-comment-post")) {
                    System.out.println("{ 'status' : 'error', 'message' : 'No text provided'}");
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-delete-comment-by-id")) {
                    System.out.println("{ 'status' : 'error', 'message' : 'No identifier was provided'}");
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-get-following")) {
                    user.getFollowingList(strings[1].substring(3));
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-get-followers")) {
                    System.out.println("{'status':'error','message':'No username to list followers was provided'}");
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-get-followings-posts")) {
                    Post post = new Post();
                    post.getFollowingsPostList(strings[1].substring(3));
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-get-post-details")) {
                    System.out.println("{ 'status' : 'error', 'message' : 'No post identifier was provided'}");
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-get-user-posts")) {
                    System.out.println("{ 'status' : 'error', 'message' : 'No username to list posts was provided'}");
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-like-post")) {
                    System.out.println("{ 'status' : 'error', 'message' : 'No post identifier to like was provided'}");
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-unlike-post")) {
                    System.out.println("{ 'status' : 'error', 'message' : 'No post identifier to unlike was provided'}");
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-like-comment")) {
                    System.out.println("{ 'status' : 'error', 'message' : 'No comment identifier to like was provided'}");
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-unlike-comment")) {
                    System.out.println("{ 'status' : 'error', 'message' : 'No comment identifier to unlike was provided'}");
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-get-most-liked-posts")) {
                    Post post = new Post();
                    post.getMostLikedPosts();
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-get-most-followed-users")) {
                    user.getMostFollowed();
                } else if (user.checkIfUserExist() == 11 && strings[0].equals("-get-most-commented-posts")) {
                    Comment comment = new Comment();
                    comment.getMostCommentedPosts();
                }
            }
        } else if (strings.length == 2) { // if there are 2 arguments
            if (strings[0].equals("-create-user")) { // if operation type is create user
                System.out.println("{ 'status' : 'error', 'message' : 'Please provide password'}");
            } else if (strings[0].equals("-get-most-liked-users") || strings[0].equals("-get-most-followed-users") ||
                    strings[0].equals("-get-most-commented-posts") || strings[0].equals("-get-most-liked-posts") ||
                    strings[0].equals("-unlike-comment") || strings[0].equals("-like-comment") || strings[0].equals("-unlike-post") ||
                    strings[0].equals("-like-post") || strings[0].equals("-get-user-posts") || strings[0].equals("-get-post-details") ||
                    strings[0].equals("-get-followings-posts") || strings[0].equals("-get-following") || strings[0].equals("-get-followers") ||
                    strings[0].equals("-delete-comment-by-id") || strings[0].equals("-follow-user-by-username") ||
                    strings[0].equals("-create-post") || strings[0].equals("-delete-post-by-id") ||
                    strings[0].equals("-unfollow-user-by-username") || strings[0].equals("-comment-post")) { // if operation type is (create or delete post,
                // follow or unfollow user, create or delete comment, get following or followers, get users post or details,
                // like or unlike (post or comment), get most (liked user, liked posts, commented posts, followed users))
                System.out.println(ERROR1);
            }
        } else if (strings.length == 1) { // if there is only 1 argument
            if (strings[0].equals("-create-user")) { // if operation type is create user
                System.out.println("{ 'status' : 'error', 'message' : 'Please provide username'}");
            } else if (strings[0].equals("–create-post")) { // if operation type is create post
                System.out.println("{ 'status' : 'error', 'message' : 'No text provided'}");
            } else if (strings[0].equals("-get-most-liked-users") || strings[0].equals("-get-most-followed-users") ||
                    strings[0].equals("-get-most-commented-posts") || strings[0].equals("-get-most-liked-posts") ||
                    strings[0].equals("-unlike-comment") || strings[0].equals("-like-comment") ||strings[0].equals("-unlike-post") ||
                    strings[0].equals("-like-post") || strings[0].equals("-get-user-posts") || strings[0].equals("-get-post-details") ||
                    strings[0].equals("-get-followings-posts") || strings[0].equals("-get-followers") ||
                    strings[0].equals("-get-following") || strings[0].equals("-delete-comment-by-id") ||
                    strings[0].equals("-delete-post-by-id") || strings[0].equals("-follow-user-by-username") ||
                    strings[0].equals("-unfollow-user-by-username") || strings[0].equals("-create-post") ||
                    strings[0].equals("-comment-post")) { // if operation type is (create or delete post, follow or unfollow user,
                // create or delete comment, get following or followers, get users post or details,
                // like or unlike (post or comment), get most (liked user, liked posts, commented posts, followed users))
                System.out.println(ERROR1);
            } else if (strings[0].equals("-cleanup-all")) { // if operation type is cleanup all
                eraseFile();
            }
        }
    }
}
